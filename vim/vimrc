set nocompatible              " be iMproved, required 关闭vi的一致性模式 避免以前版本的一些Bug和局限
set term=screen-256color
set encoding=utf-8
filetype on                  " required

call plug#begin('~/.vim/plugged')

Plug 'git@github.com:Valloric/YouCompleteMe.git'
Plug 'git@github.com:scrooloose/nerdtree.git', { 'on': 'NERDTreeToggle' }
Plug 'git@github.com:scrooloose/nerdcommenter.git'
Plug 'git@github.com:ctrlpvim/ctrlp.vim.git'
Plug 'git@github.com:pangloss/vim-javascript.git'
Plug 'git@github.com:mileszs/ack.vim.git'
Plug 'git@github.com:majutsushi/tagbar.git'
Plug 'git@github.com:vim-scripts/taglist.vim.git'
Plug 'git@github.com:HerringtonDarkholme/yats.vim.git' " typescript plugin
Plug 'git@github.com:powerline/powerline.git'
Plug 'git@github.com:vim-airline/vim-airline.git'
Plug 'vim-airline/vim-airline-themes'
Plug 'git@github.com:terryma/vim-multiple-cursors.git'
Plug 'ekalinin/Dockerfile.vim'
Plug 'janko-m/vim-test'
Plug 'git@github.com:tpope/vim-fugitive.git'
Plug 'posva/vim-vue'
Plug '/usr/local/opt/fzf'
Plug 'git@github.com:SirVer/ultisnips.git'
Plug 'honza/vim-snippets'
Plug 'ervandew/supertab'
Plug 'jeffkreeftmeijer/vim-numbertoggle'
" http://www.panozzaj.com/blog/2015/08/28/must-have-vim-javascript-setup/
" Plug 'git@github.com:ternjs/tern_for_vim.git' " tern for vim

call plug#end()

autocmd FileType javascript set tabstop=2 | set shiftwidth=2 | set expandtab
autocmd FileType typescript set tabstop=2 | set shiftwidth=2 | set expandtab
autocmd FileType cpp set tabstop=2 | set shiftwidth=2 | set expandtab
autocmd FileType sh set softtabstop=4

set incsearch               " 输入搜索内容时就显示搜索结果
set backspace=indent,eol,start " 不设定在插入状态无法用退格键和 Delete 键删除回车符
set autoread " Set to auto read when a file is changed from the outside
set wildmenu " 设置vim自身命令行自动补全

" Linebreak on 500 characters
set lbr
set tw=500
set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines
set nu

nmap <F10> :NERDTreeToggle<CR>
nmap <F9> :set hls!<BAR>set hls?<CR> " 搜索高亮开关

"设置取消备份 禁止临时文件生成
set nobackup
set noswapfile

" airline plugin
let g:airline#extensions#tabline#enabled = 1

" ctrlp ignore
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']

""""""""""""""""""""""""""""""""""""""""""
"""""  注释插件配置  """""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" tagbar 插件配置
" nmap <F8> :TagbarToggle<CR>

" 折叠
set foldmethod=syntax
set nofoldenable

" 光标设置
" 禁止光标闪烁
set gcr=a:block-blinkon0
" 设置光标行列高亮
set cursorcolumn
set cursorline
highlight CursorLine cterm=NONE ctermbg=241 ctermfg=NONE guibg=NONE guifg=NONE
" highlight CursorLine   cterm=NONE ctermbg=black ctermfg=green guibg=NONE guifg=NONE
highlight CursorColumn cterm=NONE ctermbg=241 ctermfg=NONE guibg=NONE guifg=NONE
" highlight CursorColumn cterm=NONE ctermbg=black ctermfg=green guibg=NONE guifg=NONE

let c='a'
while c <= 'z'
  exec "set <A-".c.">=\e".c
  exec "imap \e".c." <A-".c.">"
  let c = nr2char(1+char2nr(c))
endw

set timeout ttimeoutlen=50

" 颜色配置
" let g:molokai_original = 1
set laststatus=2
" let g:airline_theme='dark theme with powerline symbols'

" 多光标设置
let g:multi_cursor_prev_key='<C-b>'

" 键位映射

nnoremap 1 1gt
nnoremap 2 2gt
nnoremap 3 3gt
nnoremap 4 4gt
nnoremap 5 5gt
nnoremap 6 6gt
nnoremap 7 7gt
nnoremap 8 8gt
nnoremap 9 9gt
nnoremap  :tabp<CR>
nnoremap  :tabn<CR>
nnoremap 0 :tablast<CR>
nnoremap <F5> :checktime<CR>

" visual 模式下选中一段文本并粘贴来实现替换 粘贴时不置换"剪贴板"
xnoremap p pgvy

" map <Esc>[1;9D :tabn<CR>
"
if !exists("g:ycm_semantic_triggers")
  let g:ycm_semantic_triggers = {}
endif
let g:ycm_semantic_triggers['typescript'] = ['.']

" ag setting
let g:ackprg = 'ag --vimgrep'

"" Ultisnips
let g:UltiSnipsExpandTrigger="<S-tab>"

" 自动补全括号
inoremap ( ()<Esc>i
inoremap [ []<Esc>i
inoremap { {}<Esc>i
inoremap " ""<Esc>i


" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

" " better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
